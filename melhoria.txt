melhorias a serem feitas 

logout - 
  - mudar as messagens --ok
  - mudar e criar o tratamento de erros --ok 
  - testar e criar um teste 

login -
  - validar os campos da dto  --ok
  - melhorar o tratamento de erros -- ok 
  - tentar criar mensagens personalizadas com base nos erros --ok
  - tentar criar um test 
  - mudar nome da DTO --ok

customLogger - 
  - criar testes com base no nivel de logs

documentacao 
  - documentar todos os endpoints com status e info
  - docs controller movies 
  - mexer na response de findall movies
  - documetar controller logs

validacao do token 
  - mudar os token invalidos para banco inves de memorias


-banco de dados 
 - fazer com que o nome do filme seja unique
 - adicionar createdAt e updatedAt
 - adicionar como default estado a assistir na tabela 

############ endpoints 

- `POST /filme` → Adiciona um filme à lista de desejos. Busca informações na API externa e gera um identificador único.  ok
- `GET /filme` → Lista todos os filmes na lista de desejos.  -- ok
- `GET /filme/:id` → Retorna detalhes de um filme específico. -- ok
- `PUT /filme/:id/estado` → Move o filme para um novo estado (ex: assistido, avaliado, recomendado). 
- `POST /filme/:id/avaliar` → Avalia o filme com uma nota de 0 a 5. 
- `GET /filme/:id/historico` → Retorna o histórico completo de um filme.

- `GET /logs` → Retorna todos os logs registrados (para fins de debug).


Requisitos 
1. Autenticação: 
   - Use autenticação básica (usuário e senha fixos) para proteger os endpoints da 
API. Não é necessário criar meios de criação de novos usuários!. 
 
2. Integração com API Externa: --ok
   - Integre a API com uma API pública de filmes The Movie Database - TMDB. 
   - Ao adicionar um filme, busque informações como título, sinopse, ano de 
lançamento e gênero na API externa (qualquer informação adicional pode ser 
adicionada desde que faça sentido para o projeto). 
 
3. Middleware de Logs: 
   - Crie um middleware que registre todas as requisições recebidas, incluindo: 
 
     - Método HTTP, URL, status da resposta, timestamp e identificador único do filme 
(se aplicável, o filme deve ser válido, ou seja, existente na API sugerida). 
   - Para cada filme adicionado, gere um identificador único (ex: UUID) e o vincule 
a todas as ações futuras relacionadas a esse filme (ex: mover para assistido, 
avaliar, etc.). 
   - Armazene os logs em banco de dados (ex: SQLite ou MongoDB). 
 
4. Estados do Filme: --ok
   - Um filme pode estar em um dos seguintes estados: 
     1. A assistir (estado inicial ao adicionar, sempre). 
     2. Assistido. 
     3. Avaliado (com uma nota de 0 a 5). 
     4. Recomendado ou Não recomendado. 
   - Crie endpoints para mover o filme entre esses estados. 
 
5. Histórico de um Filme: 
   - Crie um endpoint que retorne o histórico completo de um filme, incluindo todas 
as ações realizadas (ex: adicionado, movido para assistido, avaliado, etc.) com 
timestamps e a identificação do usuário que realizou a ação. 
 
6. Swagger: 
   - Documente a API usando Swagger, incluindo exemplos de requisições e 
respostas para todos os endpoints. -- quase ok
 
 
 
Endpoints sugeridos 
1. Filmes: 
 
   - `POST /filme` → Adiciona um filme à lista de desejos. Busca informações na API 
externa e gera um identificador único. --ok
   - `GET /filme` → Lista todos os filmes na lista de desejos. --ok
   - `GET /filme/:id` → Retorna detalhes de um filme específico. --ok
   - `PUT /filme/:id/estado` → Move o filme para um novo estado (ex: assistido, 
avaliado, recomendado).  --ok
   - `POST /filme/:id/avaliar` → Avalia o filme com uma nota de 0 a 5. --ok
   - `GET /filme/:id/historico` → Retorna o histórico completo de um filme. 
 
2. Logs: 
   - `GET /logs` → Retorna todos os logs registrados (para fins de debug). -- ok
 
Exemplo de funcionamento 
1. Adicionar um Filme: 
   - O usuário faz uma requisição `POST /filme` com o nome do filme. -- ok
   - A API busca informações na API externa (TMDB) e adiciona o filme à lista de 
desejos com o estado "A assistir".  -- ok 
   - Um identificador único é gerado e vinculado ao filme. -- ok
   - O middleware registra a ação no log. -- a fazer
 
2. Mover para Assistido: 
   - O usuário faz uma requisição `PUT /filme/:id/estado` com o novo estado 
"Assistido". -- ok
   - O middleware registra a ação no log, vinculada ao identificador único do filme. -- a fazer
 
3. Avaliar o Filme: 
   - O usuário faz uma requisição `POST /filme/:id/avaliar` com uma nota de 0 a 5. -- ok
   - O middleware registra a ação no log, vinculada ao identificador único do filme. -- a fazer
 
 
4. Consultar Histórico: 
   - O usuário faz uma requisição `GET /filme/:id/historico` e recebe o histórico -- a fazer 
completo do filme, incluindo todas as ações realizadas. -- a fazer 
 
Diferenciais 
1. Expansibilidade do Middleware: -- ok 
   - Projete o middleware de logs para ser expansível, permitindo a adição de novos 
tipos de logs no futuro (ex: logs de erros, logs de desempenho). 
 
2. Validações: -- ok
   - Adicione validações para garantir que um filme só possa ser movido para 
"Avaliado" após ser "Assistido", e para "Recomendado/Não recomendado" após ser 
"Avaliado".  
 
3. Testes Unitários: -- quase ok
   - Escreva testes unitários para o middleware de logs e para os endpoints 
principais. 
 
4. Adicionar Paginação: -- ok 
   - Para a listagem de filmes (`GET /filme`), implemente paginação para evitar 
retornar muitos dados de uma vez. 
 
5. Filtrar por Estado: -- ok
   - Adicione um parâmetro de filtro no endpoint `GET /filme` para listar filmes por 
estado (ex: apenas filmes "A assistir"). 
 
6. Testes de Integração: -- quase ok
